name: Commit WorkFlow

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install

      - name: Check Errors
        run: |
          npm run lint
          npm run format

      - name: Build
        run: npm run build

      - name: Get Preview from package.json
        id: get_preview
        run: echo "{name}={$(node -p "require('./package.json').preview || false")}" >> $GITHUB_OUTPUT

      - name: Get Version from package.json
        id: get_version
        run: echo "{name}={$(node -p "require('./package.json').version")}" >> $GITHUB_OUTPUT

  publish-dev-to-npm:
    needs: build
    runs-on: ubuntu-latest

    if: needs.build.outputs.get_preview == true

    steps:
      - uses: actions/checkout@v3

      - name: Publish to NPM (Dev Version)
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm publish --tag=dev

  publish-to-npm:
    needs: build
    runs-on: ubuntu-latest

    if: needs.build.outputs.get_preview != true

    steps:
      - uses: actions/checkout@v3

      - name: Publish to NPM (Normal Version)
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm publish

  publish-to-github-releases:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.get_version }}
          release_name: Release v${{ needs.build.outputs.get_version }}
          body: |
            Release v${{ needs.build.outputs.get_version }}
          draft: false
          prerelease: ${{ needs.build.outputs.get_preview == true }}
